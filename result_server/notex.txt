peoplen can sub to comp ids, all teams all players. simple
wonder if weird messages are pings?


tomorrow:
- subscribe to results? (think simplest just get all results with competition subscribe)
- publish players with teams
- use the belonging_to association stuff
- write the create-db sql for fantasy


tomorrow2:
- sort out passing in ws_conns vs ws_conns DONE
- another attempt at question mark error-handling in main  DONE
- base simple fantasy messages (user-join. upsert-league)
- add position to players (position can change over time)




tuesday 4:
- ah fuck it just dupe the ids
- add functionality for player positions
- refudge bulk-insert bulk update (can for now internally do a shitty map and separate updates)

wednes 5:
- return trims and publish them
- update-db for nullable stuff and removing some prim-keys
- transactions in result
- league setup (i.e has periods, has set draft time)...oh add num_draftees per draft

thursda 6:
- a draft can happen

friday 7: 
- thread to process draft/advance it if no-one picks

saturday:
- start leaderboard db/server

sunday:
- docker container to boot/run things
















@dnsco If you dont mind extra-lines/boilerplate and you are using postgresql.

This works for me

    diesel::insert_into(table)
        .values(new)
        .on_conflict(league_id)
        .do_update()
        .set((
            meta.eq(excluded(meta)),
            name.eq(excluded(name)),
            team_size.eq(excluded(team_size)),
            competition_id.eq(excluded(competition_id)),
            squad_size.eq(excluded(squad_size)),
            max_players_per_team.eq(excluded(max_players_per_team)),
            max_players_per_position.eq(excluded(max_players_per_position)),
        ))
        //.set(new) would work for single upsert, but not bulk upsert. As the Vec doesnt impl AsChangeset
        .get_results(conn)

Extra notes:
I was interested in 'partial-bulk-upsert', where null values indicate "Dont update. leave as-is".
However this looks very tricky/effort.

because if you do it in raw SQL, you'll notice it tries the INSERT with the null values (likely to error for un-nullable colums), before anything else....so it errors with "cant insert null", rather than hitting the on conflict for Pkey.

Whilst could write some postgresql hooks/functions to achieve this, is awkward and far outside realm of diesel.